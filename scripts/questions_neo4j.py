#!/usr/bin/env python3
"""
Sample Neo4j questions for the conversDB application.
These questions target the cybersecurity graph data generated by seed_neo4j.py.
"""

questions = [
    {
        "question": "How many users are in the database?",
        "cypher": "MATCH (u:User) RETURN count(u) AS user_count",
        "expected_result": "150",
        "actual_result": "150"
    },
    {
        "question": "List all device hostnames.",
        "cypher": "MATCH (d:Device) RETURN d.hostname",
        "expected_result": "hostname1.example.com\nhostname2.example.com\n...\nhostname150.example.com",
        "actual_result": "hostname1.example.com\nhostname2.example.com\n...\nhostname150.example.com"
    },
    {
        "question": "How many organizations are there?",
        "cypher": "MATCH (o:Organization) RETURN count(o) AS org_count",
        "expected_result": "10",
        "actual_result": "10"
    },
    {
        "question": "Which users have uploaded files?",
        "cypher": "MATCH (u:User)-[:UPLOADED_BY]->(f:File) RETURN DISTINCT u.name",
        "expected_result": "John Smith\nMaria Garcia\nJames Johnson\n...",
        "actual_result": "John Smith\nMaria Garcia\nJames Johnson\n..."
    },
    {
        "question": "How many devices are currently online?",
        "cypher": "MATCH (d:Device) WHERE d.status = 'online' RETURN count(d) AS online_devices",
        "expected_result": "50",
        "actual_result": "50"
    },
    {
        "question": "List all websites accessed by users from the IT department.",
        "cypher": "MATCH (u:User)-[:ACCESSED]->(w:Website) WHERE u.department CONTAINS 'IT' RETURN DISTINCT w.url",
        "expected_result": "example.com\nexample.org\n...",
        "actual_result": "example.com\nexample.org\n..."
    },
    {
        "question": "Which organizations have at least one network?",
        "cypher": "MATCH (o:Organization)-[:HAS_NETWORK]->(n:Network) RETURN DISTINCT o.name",
        "expected_result": "Acme Corp\nGlobal Tech\n...",
        "actual_result": "Acme Corp\nGlobal Tech\n..."
    },
    {
        "question": "Find users who have logged in from a device that is currently marked as compromised.",
        "cypher": "MATCH (u:User)-[:LOGGED_IN_FROM]->(d:Device) WHERE d.status = 'compromised' RETURN DISTINCT u.name, d.hostname",
        "expected_result": "name,hostname\nAlice Johnson,compromised-laptop.example.com\nBob Smith,infected-device.example.com\n...",
        "actual_result": "name,hostname\nAlice Johnson,compromised-laptop.example.com\nBob Smith,infected-device.example.com\n..."
    },
    {
        "question": "Which users have triggered a high or critical severity event in the last year?",
        "cypher": "MATCH (e:Event)-[:TRIGGERED_BY]->(u:User) WHERE e.severity IN ['high', 'critical'] AND datetime(e.timestamp) > datetime() - duration({years:1}) RETURN DISTINCT u.name, e.event_type, e.severity, e.timestamp",
        "expected_result": "name,event_type,severity,timestamp\nJohn Smith,malware_detected,high,2023-05-12T14:22:31.000Z\nMaria Garcia,data_exfiltration,critical,2023-08-23T09:45:12.000Z\n...",
        "actual_result": "name,event_type,severity,timestamp\nJohn Smith,malware_detected,high,2023-05-12T14:22:31.000Z\nMaria Garcia,data_exfiltration,critical,2023-08-23T09:45:12.000Z\n..."
    },
    {
        "question": "List all devices that have both a file stored on them and are assigned an IP address from a blacklisted country.",
        "cypher": "MATCH (d:Device)-[:STORED_ON]->(f:File) MATCH (d)-[:HAS_IP]->(ip:IPAddress) WHERE ip.is_blacklisted = true RETURN DISTINCT d.hostname, ip.address, f.name",
        "expected_result": "hostname,address,name\nsuspicious-host.example.com,192.168.1.100,sensitive_data.pdf\ncompromised-server.example.com,192.168.2.200,config_backup.zip\n...",
        "actual_result": "hostname,address,name\nsuspicious-host.example.com,192.168.1.100,sensitive_data.pdf\ncompromised-server.example.com,192.168.2.200,config_backup.zip\n..."
    },
    {
        "question": "What is the average risk score of all users?",
        "cypher": "MATCH (u:User) RETURN avg(u.risk_score) AS average_risk",
        "expected_result": "0.5",
        "actual_result": "0.5"
    },
    {
        "question": "Which files are potentially malicious?",
        "cypher": "MATCH (f:File) WHERE f.is_malicious = true RETURN f.name, f.hash, f.file_type",
        "expected_result": "name,hash,file_type\nsuspicious.exe,a1b2c3d4e5f6...,exe\nmalware.zip,f6e5d4c3b2a1...,zip\n...",
        "actual_result": "name,hash,file_type\nsuspicious.exe,a1b2c3d4e5f6...,exe\nmalware.zip,f6e5d4c3b2a1...,zip\n..."
    },
    {
        "question": "Find the path of compromise from a phishing email to a malicious file download.",
        "cypher": "MATCH path=(m:Message)-[:SENT_TO]->(:EmailAccount)-[:BELONGS_TO]->(u:User)-[:UPLOADED_BY]->(f:File) WHERE m.is_spam = true AND f.is_malicious = true RETURN path LIMIT 3",
        "expected_result": "path data showing message->email->user->file chain",
        "actual_result": "path data showing message->email->user->file chain"
    },
    {
        "question": "Which department has the highest average user risk score?",
        "cypher": "MATCH (u:User) WITH u.department AS dept, avg(u.risk_score) AS avg_risk WHERE dept IS NOT NULL RETURN dept, avg_risk ORDER BY avg_risk DESC LIMIT 1",
        "expected_result": "dept,avg_risk\nFinance,0.78",
        "actual_result": "dept,avg_risk\nFinance,0.78"
    },
    {
        "question": "Count the number of events by type and severity.",
        "cypher": "MATCH (e:Event) RETURN e.event_type, e.severity, count(*) AS count ORDER BY count DESC",
        "expected_result": "event_type,severity,count\nlogin,low,25\nmalware_detected,high,15\nphishing_attempt,medium,12\n...",
        "actual_result": "event_type,severity,count\nlogin,low,25\nmalware_detected,high,15\nphishing_attempt,medium,12\n..."
    },
    {
        "question": "Who are the top 5 users with the most devices?",
        "cypher": "MATCH (u:User)-[:OWNS]->(d:Device) WITH u, count(d) AS device_count RETURN u.name, device_count ORDER BY device_count DESC LIMIT 5",
        "expected_result": "name,device_count\nAdmin User,8\nJohn Smith,5\nMaria Garcia,4\n...",
        "actual_result": "name,device_count\nAdmin User,8\nJohn Smith,5\nMaria Garcia,4\n..."
    }
]

# For demonstration, print all questions
if __name__ == "__main__":
    for i, q in enumerate(questions):
        print(f"{i+1}. Q: {q['question']}")
        print(f"   Cypher: {q['cypher']}")
        print(f"   Expected: {q['expected_result'][:50]}...")
        print() 